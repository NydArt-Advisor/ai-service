# ========================================
# AI SERVICE - ENVIRONMENT VARIABLES
# ========================================
# Copy this file to .env and fill in your actual values
# cp env.example .env

# ========================================
# SERVER CONFIGURATION
# ========================================
PORT=5005
NODE_ENV=development

# ========================================
# OPENAI CONFIGURATION
# ========================================
# Get your API key from: https://platform.openai.com/api-keys
OPENAI_API_KEY=your-openai-api-key-here
OPENAI_MODEL=gpt-4-vision-preview
OPENAI_MAX_TOKENS=1000
OPENAI_TEMPERATURE=0.7
OPENAI_TIMEOUT=30000

# OpenAI organization (optional)
# OPENAI_ORGANIZATION=your-organization-id

# ========================================
# IMAGE PROCESSING CONFIGURATION
# ========================================
# File size limits (in bytes)
MAX_FILE_SIZE=10485760  # 10MB
MIN_FILE_SIZE=1024      # 1KB

# Allowed image types
ALLOWED_IMAGE_TYPES=image/jpeg,image/png,image/webp,image/gif,image/bmp

# Image quality settings
IMAGE_QUALITY=85
IMAGE_FORMAT=jpeg

# Image dimension limits
MAX_IMAGE_WIDTH=2048
MAX_IMAGE_HEIGHT=2048
MIN_IMAGE_WIDTH=50
MIN_IMAGE_HEIGHT=50

# Image processing options
AUTO_ROTATE=true
STRIP_METADATA=true
PROGRESSIVE_JPEG=true

# ========================================
# STORAGE CONFIGURATION
# ========================================
# Storage directories
UPLOAD_DIR=uploads
TEMP_DIR=temp
PROCESSED_DIR=processed

# Storage retention (in days)
STORAGE_RETENTION_DAYS=30
TEMP_RETENTION_HOURS=24

# Storage cleanup
AUTO_CLEANUP_ENABLED=true
CLEANUP_SCHEDULE=0 2 * * *  # Daily at 2 AM

# ========================================
# SERVICE URLs
# ========================================
# Frontend URLs
FRONTEND_URL=http://localhost:3000
CLIENT_URL=http://localhost:3000

# Inter-service communication URLs
AUTH_SERVICE_URL=http://localhost:5002
DB_SERVICE_URL=http://localhost:5001
PAYMENT_SERVICE_URL=http://localhost:3004
NOTIFICATION_SERVICE_URL=http://localhost:5006
METRICS_SERVICE_URL=http://localhost:5007

# ========================================
# SECURITY CONFIGURATION
# ========================================
# JWT secret for inter-service communication
JWT_SECRET=your-jwt-secret-for-service-communication-32-chars-minimum

# Trust proxy (for production behind reverse proxy)
TRUST_PROXY=1

# CORS configuration
CORS_ORIGIN=http://localhost:3000
CORS_CREDENTIALS=true
CORS_METHODS=GET,POST,PUT,DELETE,OPTIONS
CORS_ALLOWED_HEADERS=Content-Type,Authorization

# ========================================
# RATE LIMITING
# ========================================
# Rate limiting settings
RATE_LIMIT_ENABLED=true
RATE_LIMIT_WINDOW_MS=900000  # 15 minutes
RATE_LIMIT_MAX_REQUESTS=50
RATE_LIMIT_SKIP_SUCCESSFUL_REQUESTS=false

# Rate limiting by user
RATE_LIMIT_PER_USER=10
RATE_LIMIT_USER_WINDOW_MS=3600000  # 1 hour

# ========================================
# LOGGING CONFIGURATION
# ========================================
LOG_LEVEL=info
LOG_FILE=logs/ai-service.log
LOG_MAX_SIZE=10m
LOG_MAX_FILES=5
LOG_COLORIZE=true
LOG_TIMESTAMP=true

# OpenAI API logging
OPENAI_LOG_REQUESTS=false
OPENAI_LOG_RESPONSES=false

# Image processing logging
IMAGE_PROCESSING_LOG_LEVEL=info
IMAGE_PROCESSING_LOG_FILE=logs/image-processing.log

# ========================================
# MONITORING CONFIGURATION
# ========================================
# Prometheus metrics
PROMETHEUS_PORT=9090
METRICS_ENDPOINT=/metrics
METRICS_COLLECTION_INTERVAL=15000

# Health check settings
HEALTH_CHECK_INTERVAL=30000
HEALTH_CHECK_TIMEOUT=5000

# Performance monitoring
PERFORMANCE_MONITORING_ENABLED=true
SLOW_QUERY_THRESHOLD=10000  # 10 seconds

# ========================================
# COST MANAGEMENT
# ========================================
# Cost tracking
COST_TRACKING_ENABLED=true
MAX_COST_PER_REQUEST=0.10
MAX_COST_PER_DAY=10.00
MAX_COST_PER_MONTH=100.00

# Cost alerts
COST_ALERT_THRESHOLD=0.80  # 80% of limit
COST_ALERT_EMAIL=admin@yourdomain.com

# Token usage tracking
TRACK_TOKEN_USAGE=true
MAX_TOKENS_PER_REQUEST=1000
MAX_TOKENS_PER_DAY=10000

# ========================================
# ERROR HANDLING
# ========================================
# Error reporting
ERROR_REPORTING_ENABLED=false
ERROR_REPORTING_SERVICE=sentry
ERROR_REPORTING_DSN=your-sentry-dsn

# Error logging
ERROR_LOG_LEVEL=error
ERROR_LOG_FILE=logs/error.log
ERROR_LOG_MAX_SIZE=5m
ERROR_LOG_MAX_FILES=3

# Retry configuration
RETRY_ATTEMPTS=3
RETRY_DELAY=1000
RETRY_BACKOFF_MULTIPLIER=2

# ========================================
# CACHING CONFIGURATION
# ========================================
# Response caching
CACHE_ENABLED=false
CACHE_TTL=3600000  # 1 hour
CACHE_MAX_SIZE=100
CACHE_CHECK_PERIOD=600000  # 10 minutes

# OpenAI response caching
OPENAI_CACHE_ENABLED=false
OPENAI_CACHE_TTL=86400000  # 24 hours

# ========================================
# PRODUCTION OVERRIDES
# ========================================
# Uncomment and modify for production deployment
# NODE_ENV=production
# PORT=5005
# OPENAI_API_KEY=your-production-openai-api-key
# FRONTEND_URL=https://yourdomain.com
# CLIENT_URL=https://yourdomain.com
# CORS_ORIGIN=https://yourdomain.com
# TRUST_PROXY=1
# UPLOAD_DIR=/app/uploads
# TEMP_DIR=/app/temp
# STORAGE_RETENTION_DAYS=7
# RATE_LIMIT_MAX_REQUESTS=100
# LOG_LEVEL=warn
# CACHE_ENABLED=true
# ERROR_REPORTING_ENABLED=true
# COST_TRACKING_ENABLED=true

# ========================================
# DEVELOPMENT OVERRIDES
# ========================================
# Uncomment for development
# LOG_LEVEL=debug
# OPENAI_LOG_REQUESTS=true
# OPENAI_LOG_RESPONSES=true
# CORS_ORIGIN=http://localhost:3000,http://localhost:3001
# IMAGE_PROCESSING_LOG_LEVEL=debug
# PERFORMANCE_MONITORING_ENABLED=true

# ========================================
# TESTING CONFIGURATION
# ========================================
# Test OpenAI API key
TEST_OPENAI_API_KEY=test-openai-api-key
TEST_OPENAI_MODEL=gpt-4-vision-preview

# Test storage
TEST_UPLOAD_DIR=test-uploads
TEST_TEMP_DIR=test-temp
TEST_LOG_LEVEL=error

# Test data
TEST_DATA_ENABLED=false
TEST_DATA_PATH=./test-data

# ========================================
# IMAGE ANALYSIS CONFIGURATION
# ========================================
# Analysis types
ANALYSIS_TYPES=general,detailed,technical,historical,style

# Default analysis type
DEFAULT_ANALYSIS_TYPE=general

# Analysis prompts
GENERAL_ANALYSIS_PROMPT=Analyze this artwork and provide a general description including style, period, and key characteristics.
DETAILED_ANALYSIS_PROMPT=Provide a detailed analysis of this artwork including technique, composition, color palette, and historical context.
TECHNICAL_ANALYSIS_PROMPT=Analyze the technical aspects of this artwork including materials, techniques, and artistic methods used.
HISTORICAL_ANALYSIS_PROMPT=Provide historical context and significance of this artwork, including the period and cultural influences.
STYLE_ANALYSIS_PROMPT=Analyze the artistic style of this artwork, including influences, characteristics, and stylistic elements.

# ========================================
# FILE VALIDATION
# ========================================
# File validation settings
VALIDATE_FILE_HEADERS=true
VALIDATE_FILE_EXTENSIONS=true
SCAN_FOR_MALWARE=false

# Allowed file extensions
ALLOWED_EXTENSIONS=jpg,jpeg,png,webp,gif,bmp

# File header validation
VALID_JPEG_HEADER=ffd8ff
VALID_PNG_HEADER=89504e47
VALID_WEBP_HEADER=52494646
VALID_GIF_HEADER=47494638
VALID_BMP_HEADER=424d

# ========================================
# PERFORMANCE OPTIMIZATION
# ========================================
# Image processing optimization
ENABLE_IMAGE_OPTIMIZATION=true
USE_WEBP_CONVERSION=true
ENABLE_PROGRESSIVE_JPEG=true

# Memory management
MAX_CONCURRENT_PROCESSES=5
MEMORY_LIMIT=512MB
GC_INTERVAL=300000  # 5 minutes

# ========================================
# NOTES
# ========================================
# 1. Get your OpenAI API key from: https://platform.openai.com/api-keys
# 2. For production, use HTTPS URLs and secure storage
# 3. Keep your .env file secure and never commit it to version control
# 4. Monitor OpenAI API usage and costs regularly
# 5. Set up proper backup and cleanup procedures for uploaded files
# 6. Configure appropriate rate limits for your use case
# 7. Monitor disk space and implement automatic cleanup
# 8. Set up proper logging and monitoring for production
# 9. Use environment-specific configurations
# 10. Regularly update dependencies and security patches
# 11. Test image processing with various file types and sizes
# 12. Monitor API response times and optimize as needed
# 13. Set up cost alerts to avoid unexpected charges
# 14. Implement proper error handling and retry logic
# 15. Consider using CDN for image storage in production
